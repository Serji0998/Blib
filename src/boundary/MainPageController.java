package boundary;

import java.io.IOException;
import java.util.ArrayList;

import control.ReaderController;
import control.UserController;
import entity.Book;
import entity.ConstantsAndGlobalVars;
import entity.MsgParser;
import entity.User;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Modality;
import javafx.stage.Stage;

/**
 * This is the GUI controller of the main page the user sees when he/she
 * connects to the server. Here the user can search for books or log in to his
 * account.
 */
public class MainPageController {
	/**
	 * instance variables: userController - an instance of UserController used to
	 * send a request to the server to login. readerController - an instance of
	 * ReaderController used to send a request to the server to search for books.
	 */
	@FXML
	private AnchorPane anchorPane;

	private UserController userController;
	private ReaderController readerController;

	@FXML
	private TextField usernameTF;

	@FXML
	private PasswordField passwordTF;

	@FXML
	private Button loginBtn;

	@FXML
	private Label wrongInputLabel;

	@FXML

	private ComboBox searchTypeCombo;
	private ObservableList<String> searchTypeList;

	@FXML
	private TextField searchTF;

	@FXML
	private Button searchBtn;

	@FXML
	private RadioButton studentRadio;

	@FXML
	private RadioButton librarianRadio;
	private ToggleGroup tg;

	@FXML
	private ImageView usernameImg;

	@FXML
	private ImageView passwordImg;

	@FXML
	private ImageView searchImg;

	/**
	 * handles the event where the user clicks on "log in" button, sends a request
	 * to the server receives a response from the server and displays a feedback
	 * respectively (wrong user ID, wrong password, etc.) and finally, if the
	 * credentials are correct it opens a window depending on the users' role
	 * (student, librarian).
	 * 
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown if loading one of the FXML files fails.
	 */
	@FXML
	void loginHandler(ActionEvent event) throws IOException {
		wrongInputLabel.setText("");
		wrongInputLabel.setVisible(false);
		// request login from UserController, validate that both TF's contain some text.
		String userName = usernameTF.getText();
		String password = passwordTF.getText();
		if (userName.isEmpty() || password.isEmpty()) {
			wrongInputLabel.setText("Username or password is missing");
			wrongInputLabel.setVisible(true);
			return;
		}
		String tbl;
		int fxmlFile;
		if (tg.getSelectedToggle() == (RadioButton) studentRadio) {
			tbl = "users";
			fxmlFile = 1;
		} else if (tg.getSelectedToggle() == (RadioButton) librarianRadio) {
			tbl = "librarians";
			fxmlFile = 2;
		} else {
			wrongInputLabel.setText("No role chosen!");
			wrongInputLabel.setVisible(true);
			return;
		}
		try {

			MsgParser Msg = userController.login(userName, password, tbl);
			enums.LogInStatus loginResult = Msg.getReturnResult();

			if (loginResult != enums.LogInStatus.Success) {
				String error = "";
				if (loginResult == enums.LogInStatus.isLoggedIn)
					error = "User already logged in";
				else if (loginResult == enums.LogInStatus.UserNotExist)
					error = "User doesn't exist";
				else if (loginResult == enums.LogInStatus.WrongPassword)
					error = "Wrong Password";
				wrongInputLabel.setText(error);
				wrongInputLabel.setVisible(true);
				return;
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		/*
		 * open userPageGUI
		 */
		Stage primaryStage = new Stage();
		FXMLLoader loader = new FXMLLoader();
		Parent root;
		switch (fxmlFile) {
		case 1:
			root = loader.load(getClass().getResource("/boundary/UserPageGUI.fxml").openStream());
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("buttonDesign.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.setTitle("User Page");
			UserPageController up = loader.getController();
			up.loadUser(userController.getCurrentUser());
			break;
		case 2:
			root = loader.load(getClass().getResource("/boundary/LibrarianPageGUI.fxml").openStream());
			Scene scene1 = new Scene(root);
			scene1.getStylesheets().add(getClass().getResource("buttonDesign.css").toExternalForm());
			primaryStage.setScene(scene1);
			primaryStage.setTitle("Librarian Page");
			LibrarianPageController lc = loader.getController();
			lc.loadUser(userController.getCurrentUser());
			lc.setNumberOfMessages(userController.getCurrentUser());
			break;
		default:
			wrongInputLabel.setText("No role chosen!");
			wrongInputLabel.setVisible(true);
			return;
		}
		primaryStage.setOnCloseRequest(e -> close());
		primaryStage.show();
		((Stage) loginBtn.getScene().getWindow()).close();
	}

	/**
	 * handles the event where the user clicks on "Search". validates that the user
	 * did indeed choose a search type and input a keyword, sends a request to the
	 * server to search receives search results from the server and displays in a
	 * new window.
	 * 
	 * @param event - auto-generated by SceneBuilder.
	 */
	@FXML
	void searchHandler(ActionEvent event) {
		try {
			String selectedCombo = searchTypeList.get(searchTypeCombo.getSelectionModel().getSelectedIndex());
			System.out.println("Selected" + selectedCombo);
			if (searchTF.getText().isEmpty()) {
				searchTF.setPromptText("enter keyword !!!");
				searchTF.setStyle("-fx-prompt-text-fill: red;" + "-fx-font-weight: bold;");
			} else {
				ArrayList<Book> searchResult = readerController.searchForBook(selectedCombo, searchTF.getText());
				System.out.println("Search: " + searchResult);
				Stage primaryStage = new Stage();
				FXMLLoader loader = new FXMLLoader();
				Parent root = loader.load(getClass().getResource("/boundary/ReaderSearchResultsGUI.fxml").openStream());
				primaryStage.setScene(new Scene(root));
				primaryStage.setTitle("Search Results");
				ReaderSearchResultsController rsrc = loader.getController();
				rsrc.setResults(searchResult);
				primaryStage.show();
			}
		} catch (ArrayIndexOutOfBoundsException e) {
			searchTF.clear();
			searchTF.setPromptText("choose search type !!!");
			searchTF.setStyle("-fx-prompt-text-fill: red;" + "-fx-font-weight: bold;");
		} catch (NullPointerException e) {
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	/**
	 * called upon loading the FXML file, initialises some GUI elements and instance
	 * variables.
	 */
	@FXML
	void initialize() {
		tg = new ToggleGroup();
		studentRadio.setToggleGroup(tg);
		librarianRadio.setToggleGroup(tg);
		// get UserController instance..
		userController = UserController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);
		setCombo();
		readerController = ReaderController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);

		Image imgUsername = new Image("/images/usernameLogo.png");
		usernameImg.setImage(imgUsername);
		Image imgPassword = new Image("/images/passwordLogo.png");
		passwordImg.setImage(imgPassword);

	}

	/**
	 * the method to be called should the user close the window(either by the X
	 * button on the top left corner of the window or by pressing alt-F4) it logs
	 * the user out, disconnects all clients from the server and exits.
	 */
	private void close() {
		UserController uc = UserController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);
		try {
			uc.logout(uc.getCurrentUser());
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		uc.disconnectClient();
		System.exit(0);
	}

	@FXML
	void searchTypeHandler(ActionEvent event) {
		searchTF.setPromptText("enter keyword");
		searchTF.setStyle("-fx-prompt-text-fill: black;" + "-fx-font-weight: regular;");
	}

	/**
	 * this {@code private} method is called upon initialisation, it fills the
	 * comboBox with values needed.
	 */
	private void setCombo() {
		ArrayList<String> arr = new ArrayList<>();
		for (String s : ConstantsAndGlobalVars.searchType)
			arr.add(s);
		searchTypeList = FXCollections.observableArrayList(arr);
		searchTypeCombo.setItems(searchTypeList);
	}

}
