package boundary;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import entity.Book;
import entity.BookWithButton;
import entity.MyFile;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Modality;
import javafx.stage.Stage;

/**
 * This class is responsible for showing the search results for a reader (not
 * necessarily a registered user) in a tableView.
 */
public class ReaderSearchResultsController {
	/**
	 * instance variable: results - an arrayList of Books that contain the search
	 * results.
	 */
	protected ArrayList<BookWithButton> results;

	@FXML
	protected TableView<Book> searchResultsTable;
	protected ObservableList<Book> data;

	@FXML
	protected TableColumn<Book, String> CNCol;

	@FXML
	protected TableColumn<Book, String> titleCol;

	@FXML
	protected TableColumn<Book, String> shelfCol;

	@FXML
	protected TableColumn<Book, Button> viewDetailsCol;

	@FXML
	protected Button closeBtn;

	/**
	 * closes the current window.
	 * 
	 * @param event - auto-generated by SceneBuilder
	 */
	@FXML
	protected void closeHandler(ActionEvent event) {
		((Stage) closeBtn.getScene().getWindow()).close();
	}

	@FXML
	void initialize() {

	}

	/**
	 * receives the search results from the previous window stores them in the
	 * instance variable and displays in a tableView.
	 * 
	 * @param results - the search results to show.
	 */
	public void setResults(ArrayList<Book> results) {
		this.results = new ArrayList<>();
		// set the onAction method for the buttons
		for (Book b : results) {
			String catalogNumber = b.getCatalogNumber();
			String title = b.getTitle();
			String authorName = b.getAuthorName();
			String publication = b.getPublication();
			int numberOfCopies = b.getNumberOfCopies();
			Date purchaseDate = b.getPurchaseDate();
			String locationOnShelf = b.getLocationOnShelf();
			String description = b.getDescription();
			enums.BookType bookType = b.getType();
			ArrayList<String> categories = b.getCategories();
			BookWithButton book = new BookWithButton(catalogNumber, title, authorName, publication, numberOfCopies,
					purchaseDate, locationOnShelf, description, bookType, categories);
			book.getViewDetailsBtn().setOnAction(e -> {
				try {
					viewDetailsHandler(b);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			});
			this.results.add(book);
		}
		data = FXCollections.observableArrayList(this.results);
		searchResultsTable.setItems(data);
		CNCol.setCellValueFactory(new PropertyValueFactory<Book, String>("catalogNumber"));
		titleCol.setCellValueFactory(new PropertyValueFactory<Book, String>("title"));
		shelfCol.setCellValueFactory(new PropertyValueFactory<Book, String>("locationOnShelf"));
		viewDetailsCol.setCellValueFactory(new PropertyValueFactory<Book, Button>("viewDetailsBtn"));
	}

	/**
	 * each row of the tableView contains a button that shows the details of the
	 * book in that row, this method handles the click on that button. it opens the
	 * window showing the details of that book.
	 * 
	 * @param b - the book to show details of.
	 * @throws IOException - thrown should loading the FXML file fail.
	 */
	private void viewDetailsHandler(Book b) throws IOException {
		Stage primaryStage = new Stage();
		primaryStage.setAlwaysOnTop(true);
		primaryStage.initModality(Modality.APPLICATION_MODAL);
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/BookDetailsGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Book Details");
		BookDetailsController bdc = loader.getController();
		bdc.loadBook(b);
		primaryStage.show();
	}
}