package boundary;

import java.io.IOException;
import java.util.ArrayList;

import control.FaultsHistoryController;
import control.LibrarianController;
import entity.ConstantsAndGlobalVars;
import entity.User;
import enums.UserStatus;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Modality;
import javafx.stage.Stage;

/**
 * This class controls the GUI responsible for showing the details of a reader
 * card and editing them.
 */
public class ReaderCardController {
	/**
	 * instance variables: member - the member being edited currentUser - the
	 * currently logged user (librarian) librarianController - an instance of
	 * LibrarianController to use when applying the changes done.
	 */
	private User member;
	private User currentUser;
	private LibrarianController librarianController;
	private FaultsHistoryController faultsHistoryController;

	@FXML
	private Button CancelBtn;

	@FXML
	private TextField userIDTF;

	@FXML
	private TextField firstNameTF;

	@FXML
	private TextField lastNameTF;

	@FXML
	private TextField phoneNumberTF;

	@FXML
	private TextField emailTF;

	@FXML
	private TextField passwordTF;

	@FXML
	private TextField membershipNumberTF;

	@FXML
	private Button falutsBtn;

	@FXML
	private Button borrowsBtn;

	@FXML
	private Button reservationsBtn;

	@FXML
	private Button historyBtn;

	/**
	 * called upon loading the FXML file, initialises some GUI elements and instance
	 * variables.
	 */
	@FXML
	void initialize() {
		librarianController = LibrarianController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);
		faultsHistoryController = FaultsHistoryController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);

	}

	/**
	 * closes the current window
	 * 
	 * @param event - auto-generated by SceneBuilder
	 */
	@FXML
	void cancelHandler(ActionEvent event) {
		Stage window = (Stage) CancelBtn.getScene().getWindow();
		window.close();
	}

	/**
	 * saves the changes made to the reader card, sends request to the server to
	 * save them and receives a response from the server, displays the response
	 * (failure, success).
	 * 
	 * @param event - auto-generated by SceneBuilder
	 */

	/**
	 * changes the GUI elements to editable.
	 * 
	 * @param event - auto-generated by SceneBuilder.
	 */

	/**
	 * opens a new window containing a tableView that shows all active borrows for
	 * the user.
	 * 
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown should loading the FXML file encounter a
	 *                     problem.
	 */
	@FXML
	void activeBorrowsHandler(ActionEvent event) throws IOException {
		Stage primaryStage = new Stage();
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/UserBorrowsGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Active Borrows");
		primaryStage.setAlwaysOnTop(true);
		primaryStage.initModality(Modality.APPLICATION_MODAL);
		UserBorrowsController ubc = loader.getController(); // send user to reader card controller
		ubc.loadUser(member);
		primaryStage.show();
	}

	/**
	 * opens a new window containing a tableView that shows all active reservation
	 * for the user.
	 * 
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown should loading the FXML file encounter a
	 *                     problem.
	 */
	@FXML
	void activeReservationsHandler(ActionEvent event) throws IOException {
		Stage primaryStage = new Stage();
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/ReservationsGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Active Reservations");
		primaryStage.setAlwaysOnTop(true);
		primaryStage.initModality(Modality.APPLICATION_MODAL);
		UserReservationsController urc = loader.getController(); // send user to reader card controller
		urc.loadUser(member);
		primaryStage.show();
	}

	/**
	 * opens a new window containing a tableView that shows all faults for the user.
	 * 
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown should loading the FXML file encounter a
	 *                     problem.
	 */
	@FXML
	void faultsHandler(ActionEvent event) throws IOException {
		Stage primaryStage = new Stage();
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/UserFaultsHistoryGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Faults History");
		primaryStage.setAlwaysOnTop(true);
		primaryStage.initModality(Modality.APPLICATION_MODAL);
		UserFaultsHistoryController ufc = loader.getController(); // send user to reader card controller
		ufc.loadUser(member);
		primaryStage.show();
	}

	/**
	 * opens a new window containing a tableView that shows all the history for the
	 * user.
	 * 
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown should loading the FXML file encounter a
	 *                     problem.
	 */
	@FXML
	void historyHandler(ActionEvent event) throws IOException {
		Stage primaryStage = new Stage();
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/HistoryGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Borrows & Reservations History");
		primaryStage.setAlwaysOnTop(true);
		primaryStage.initModality(Modality.APPLICATION_MODAL);
		UserHistoryController uhc = loader.getController(); // send user to reader card controller
		uhc.loadUser(member);
		primaryStage.show();

	}


	/**
	 * loads the member to edit, the currently logged in user (the librarian) into
	 * instance variable. loads the member details into GUI elements.
	 * 
	 * @param member - the member to edit
	 * @param user   - the currently logged in member.
	 */
	public void loadUser(User member, User user) {
		this.member = member;
		this.currentUser = user;
		userIDTF.setText(member.getUserID());
		firstNameTF.setText(member.getFirstName());
		lastNameTF.setText(member.getLastName());
		phoneNumberTF.setText(member.getPhoneNumber());
		emailTF.setText(member.getEmail());
		passwordTF.setText(member.getPassword());
		membershipNumberTF.setText(member.getMembershipNumber());

		UserStatus status = member.getStatus(); // Change the type to UserStatus
		if (status == UserStatus.Active) {
			System.out.println("User is Active and can borrow and reserve.");
		} else if (status == UserStatus.Frozen) {
			System.out.println("User is Frozen and cannot borrow or reserve.");
		} else {
			System.out.println("Unexpected status: " + status);
		}

	}
}
