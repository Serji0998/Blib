package boundary;

import control.BookController;
import entity.Book;
import entity.ConstantsAndGlobalVars;
import entity.User;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.ButtonBar.ButtonData;

/**
 * {@inheritDoc} A subclass of {@link control.BookDetailsController} it displays
 * the same elements, the only addition is a "reserve" button that places a
 * reservation on the book displayed.
 */
public class BookDetailsForUserController extends BookDetailsController {
	/**
	 * instance variables: bookController - an instance of BookControlleer to use
	 * when getting total number of reserves currentUser - used to store the current
	 * logged in user to know to whom the reservation should be written.
	 */
	private BookController bookController;
	private User currentUser;
	@FXML
	private Button reserveButton;

	/**
	 * @see boundary.BookDetailsController#initialize() initialises the
	 *      bookController instance variable.
	 */
	@FXML
	void initialize() {
		super.initialize();
		bookController = BookController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);
	}

	/**
	 * handles the event where the user clicks "reserve" button (if visible). Gets
	 * the total number of reservation for book, if number of reservation equals
	 * total number of copies an appropriate alert is displayed. otherwise, a
	 * reservation is placed and feedback is given in an alert (i.e. success,
	 * failure - with reason)
	 * 
	 * @param event auto-generated by SceneBuilder.
	 */
	@FXML
	void reserveHandler(ActionEvent event) {
		int numOfReserves = bookController.getNumberOfReserves(super.currentBook.getCatalogNumber());
		int totalNumberOfCopies = super.currentBook.getNumberOfCopies();
		if (numOfReserves >= 0)
			System.out.println(numOfReserves);
		else {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("oops!");
			alert.setHeaderText("An error occured, please try again later");
			ButtonType buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
		}
		// handle the situation where number of reservations for the book is the same as
		// total number of copies.
		if (numOfReserves == totalNumberOfCopies) {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("oops!");
			alert.setHeaderText("Reservations are at full capacity, can't make another one");
			ButtonType buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
		}
		int result = bookController.addReserve(super.currentBook.getCatalogNumber(), this.currentUser.getUserID());
		Alert alert;
		ButtonType buttonTypeOK;
		ButtonType buttonTypeCancel;
		switch (result) {
		// SQLException
		case -1:
			alert = new Alert(AlertType.ERROR);
			alert.setTitle("oops!");
			alert.setHeaderText("500: Internal server error!");
			buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
			break;
		// Success
		case 0:
			alert = new Alert(AlertType.CONFIRMATION);
			alert.setTitle("Hurray");
			alert.setHeaderText("Book has beeen reserved");
			buttonTypeOK = new ButtonType("Ok", ButtonData.OK_DONE);
			alert.getButtonTypes().setAll(buttonTypeOK);
			alert.showAndWait();
			break;
		// user already reserved the book
		case 1:
			alert = new Alert(AlertType.ERROR);
			alert.setTitle("oops!");
			alert.setHeaderText("You can't reserve the same book twice");
			buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
			break;
		// no row affected after insert
		case 2:
			alert = new Alert(AlertType.ERROR);
			alert.setTitle("oops!");
			alert.setHeaderText("An error occured, sorry!");
			buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
			break;
		// user doesn't have permission to reserve
		case 3:
			alert = new Alert(AlertType.ERROR);
			alert.setTitle("oops!");
			alert.setHeaderText("You don't have permission to reserve, sorry!");
			buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
			break;
		}
	}

	/**
	 * @see boundary.BookDetailsController#loadBook(entity.Book) In addition to what
	 *      the superclass method does, this overridden implementation displays the
	 *      "reserve" button given that number of available copies is greater than
	 *      zero.
	 */
	@Override
	public boolean loadBook(Book book) {
		super.loadBook(book);
		int numOfCopies = Integer.parseInt(super.numberOfCopiesLabel.getText());
		if (numOfCopies > 0)
			reserveButton.setVisible(false);
		else if (numOfCopies < 0) {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("oops!");
			alert.setHeaderText("An error occured, please try again later");
			ButtonType buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
			return false;
		}
		return true;
	}

	/**
	 * initialises the currentUser instance from the previous window.
	 */
	public void loadUser(User u) {
		this.currentUser = u;
	}
}
