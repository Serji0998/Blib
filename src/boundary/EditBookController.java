package boundary;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;

import control.BookController;
import entity.Book;
import entity.ConstantsAndGlobalVars;
import entity.MyFile;
import enums.BookType;
import javafx.application.HostServices;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.ButtonBar.ButtonData;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

/**
 * @see boundary.AddBookController very similar to AddBookController, with the
 *      addition of the ability to download the table of contents file or upload
 *      a new one.
 */
public class EditBookController {
	/**
	 * instance variables: bookController - an instance of BookController to use
	 * when saving changes. currentBook - the book being edited. filePath - the
	 * download destination for the table of contents file.
	 */
	private BookController bookController;
	private Book currentBook;
	private String filePath;
	private final String uploadTitle = "upload a new file";
	private final String canacelUpload = "cancel";
	private final String addNewCategoryBtnTitle = "Add New Category";
	private final String cancelBtnTitle = "Cancel";
	@FXML
	private Label catalogNumberLabel;

	@FXML
	private TextField titleTF;

	@FXML
	private TextField authorNameTF;

	@FXML
	private TextField publicationTF;

	@FXML
	private TextField numberOfCopiesTF;

	@FXML
	private DatePicker purchaseDateDP;

	@FXML
	private TextField shelfNumberTF;

	@FXML
	private TextField sideTF;

	@FXML
	private TextArea descriptionTA;

	@FXML
	private ComboBox typeCB;
	private ObservableList<String> bookTypesList;

	@FXML
	private TextField destTF;

	@FXML
	private Button saveBookBtn;

	@FXML
	private Button cancelBtn;

	@FXML
	private Button dirBrowseButton;

	@FXML
	private Button downloadFileButton;

	@FXML
	private Button viewFileButton;

	@FXML
	private Button FileBrowserButton;

	@FXML
	private Button uploadNewButton;

	@FXML
	private ComboBox<String> categoriesComboBox;
	private ObservableList<String> categoryList;

	@FXML
	private Button addCategoryBtn;

	@FXML
	private TextField newCategoryTF;

	@FXML
	private Button addNewCategoryBtn;

	@FXML
	private Button show_hide_newCategoryPromptBtn;

	@FXML
	private TextArea categoriesTA;

	/**
	 * @see boundary.AddBookController#show_hide_newCategoryPromptHandler(ActionEvent)
	 * @param event - auto-generated by SceneBuilder.
	 */
	@FXML
	void show_hide_newCategoryPromptHandler(ActionEvent event) {
		if (show_hide_newCategoryPromptBtn.getText().equals(addNewCategoryBtnTitle)) {
			newCategoryTF.setVisible(true);
			addNewCategoryBtn.setVisible(true);
			show_hide_newCategoryPromptBtn.setText(cancelBtnTitle);
		} else {
			newCategoryTF.setVisible(false);
			addNewCategoryBtn.setVisible(false);
			show_hide_newCategoryPromptBtn.setText(addNewCategoryBtnTitle);
		}
	}

	/**
	 * @see boundary.AddBookController#addCategoryHandler(ActionEvent)
	 * @param event - auto-generated by SceneBuilder.
	 */
	@FXML
	void addCategoryHandler(ActionEvent event) {
		try {
			String category = categoriesComboBox.getSelectionModel().getSelectedItem();
			if (category == null)
				throw new ArrayIndexOutOfBoundsException();
			categoryList.remove(category);
			categoriesComboBox.setItems(categoryList);
			categoriesTA.setText(categoriesTA.getText() + category + ",");
		} catch (ArrayIndexOutOfBoundsException e) {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("Whoa!");
			alert.setHeaderText("Please choose an  item from the list");
			ButtonType buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
		}
	}

	/**
	 * @see boundary.AddBookController#addNewCategoryHandler(ActionEvent)
	 * @param event - auto-generated by SceneBuilder.
	 */
	@FXML
	void addNewCategoryHandler(ActionEvent event) {
		if (!newCategoryTF.getText().isEmpty())
			categoriesTA.setText(categoriesTA.getText() + newCategoryTF.getText() + ",");
		else {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("Whoa!");
			alert.setHeaderText("At least type something...");
			ButtonType buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
		}
	}

	/**
	 * @see boundary.AddBookController#cancelHandler(ActionEvent)
	 * @param event - auto-generated by SceneBuilder
	 * @throws IOException - thrown if loading the FXML file fails.
	 */
	@FXML
	void cancelHandler(ActionEvent event) throws IOException {
		Stage primaryStage = (Stage) cancelBtn.getScene().getWindow();
		FXMLLoader loader = new FXMLLoader();
		Parent root = loader.load(getClass().getResource("/boundary/InventoryManagementGUI.fxml").openStream());
		primaryStage.setScene(new Scene(root));
		primaryStage.setTitle("Inventory Management");
		primaryStage.show();
	}

	/**
	 * This method saves any changes made to the book being edited. It validates all
	 * fields are not empty, uploads the file chosen by the user (if applicable) and
	 * calls the {@link control.BookController#updateBook(Book)} method to update
	 * the book.
	 * 
	 * @param event - auto-generated by SceneBuilder.
	 * @throws IOException - thrown if writing the file to a byte array fails.
	 */
	@FXML
	void saveBookHandler(ActionEvent event) throws IOException {
		boolean isOk = true;
		if (titleTF.getText().isEmpty())
			isOk = false;
		if (authorNameTF.getText().isEmpty())
			isOk = false;
		if (publicationTF.getText().isEmpty())
			isOk = false;
		if (purchaseDateDP.getValue() == null)
			isOk = false;
		if (shelfNumberTF.getText().isEmpty())
			isOk = false;
		if (sideTF.getText().isEmpty())
			isOk = false;
		if (descriptionTA.getText().isEmpty())
			isOk = false;
		if (!isOk) {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("OOPS!");
			alert.setHeaderText("One or more of the fields is empty.");
			ButtonType buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
			return;
		}
		/*
		 * validate that each element is not empty.
		 */
		try {
			String catalogNumber = catalogNumberLabel.getText();
			String title = titleTF.getText();
			String author = authorNameTF.getText();
			String publication = publicationTF.getText();
			int numberOfCopies = Integer.parseInt(numberOfCopiesTF.getText());
			LocalDate purchaseDate_ld = purchaseDateDP.getValue();
			String locationOnShelf = shelfNumberTF.getText() + sideTF.getText();
			String description = descriptionTA.getText();
			enums.BookType booktype = enums.BookType
					.valueOf(bookTypesList.get(typeCB.getSelectionModel().getSelectedIndex()));

			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
			Date purchaseDate = Date.from(purchaseDate_ld.atStartOfDay(ZoneId.systemDefault()).toInstant());
			format.format(purchaseDate);
			Book book = new Book(catalogNumber, title, author, publication, numberOfCopies, purchaseDate,
					locationOnShelf, description, booktype);
			if (bookController.updateBook(book)) {
				Alert alert = new Alert(AlertType.CONFIRMATION, "Book updated successfully", ButtonType.OK);
				alert.showAndWait();
				if (alert.getResult() == ButtonType.OK) {
					Stage primaryStage = (Stage) saveBookBtn.getScene().getWindow();
					FXMLLoader loader = new FXMLLoader();
					Parent root = loader
							.load(getClass().getResource("/boundary/InventoryManagementGUI.fxml").openStream());
					primaryStage.setScene(new Scene(root));
					primaryStage.setTitle("Inventory Management");
					primaryStage.show();
				}
			} else {
				Alert alert = new Alert(AlertType.ERROR, "Failure updating book", ButtonType.OK);
				alert.showAndWait();
				if (alert.getResult() == ButtonType.OK) {
					Stage primaryStage = (Stage) saveBookBtn.getScene().getWindow();
					FXMLLoader loader = new FXMLLoader();
					Parent root = loader
							.load(getClass().getResource("/boundary/InventoryManagementGUI.fxml").openStream());
					primaryStage.setScene(new Scene(root));
					primaryStage.setTitle("Inventory Management");
					primaryStage.show();
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		} catch (NumberFormatException n) {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("Failure!");
			alert.setHeaderText("Please enter numbers only in number of copies field..");
			ButtonType buttonTypeCancel = new ButtonType("Ok", ButtonData.CANCEL_CLOSE);
			alert.getButtonTypes().setAll(buttonTypeCancel);
			alert.showAndWait();
		}

	}

	/**
	 * @see boundary.AddBookController#initialize()
	 */
	@FXML
	void initialize() {
		bookController = BookController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);
		fillComboBox();
		viewFileButton.setVisible(false);
		FileBrowserButton.setVisible(false);
		destTF.setEditable(false);
	}

	/**
	 * This {@code private} method is called upon initialisation, it fills the
	 * comboBoxes with their respective values.
	 */
	private void fillComboBox() {
		ArrayList<String> arr = new ArrayList<>();
		for (BookType b : enums.BookType.values())
			arr.add(b.name());
		bookTypesList = FXCollections.observableArrayList(arr);
		typeCB.setItems(bookTypesList);
	}

	/**
	 * @see boundary.BookDetailsController#loadBook(Book)
	 * @param b - the book to edit
	 */
	public void loadBook(Book b) {
		this.currentBook = b;
		System.out.println(this.currentBook);
		catalogNumberLabel.setText(this.currentBook.getCatalogNumber());
		titleTF.setText(this.currentBook.getTitle());
		authorNameTF.setText(this.currentBook.getAuthorName());
		publicationTF.setText(this.currentBook.getPublication());
		numberOfCopiesTF.setText(Integer.toString(this.currentBook.getNumberOfCopies()));
		// convert Date to localDate and display it on DatePicker
		Date input = this.currentBook.getPurchaseDate();
		LocalDate purchaseDate = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
		purchaseDateDP.setValue(purchaseDate);
		String shelfNumber = this.currentBook.getLocationOnShelf().substring(0, 3);
		shelfNumberTF.setText(shelfNumber);
		String shelfSide = this.currentBook.getLocationOnShelf().substring(3, 4);
		sideTF.setText(shelfSide);
		descriptionTA.setText(this.currentBook.getDescription());
		typeCB.getSelectionModel().select(bookTypesList.indexOf(this.currentBook.getType().name()));
		ArrayList<String> categoriesArrayList = this.currentBook.getCategories();
		String text = "";
		for (String string : categoriesArrayList) {
			text = text + string + ",";
		}
		categoriesTA.setText(text);
		ArrayList<String> categories = bookController.getAllCategories();
		categories.removeAll(categoriesArrayList);
		System.out.println(categories);
		categoryList = FXCollections.observableList(categories);
		categoriesComboBox.setItems(categoryList);
		categoriesComboBox.setPromptText("Choose an existing category");
	}
}
