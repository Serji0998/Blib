package boundary;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;

import control.BookController;
import control.BookCopyController;
import control.BorrowsController;
import entity.Book;
import entity.Borrows;
import entity.ConstantsAndGlobalVars;
import javafx.application.HostServices;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.stage.DirectoryChooser;
import javafx.stage.Stage;

/**
 * <h1><b>BookDetailsController</b></h1> This is the GUI controller responsible
 * displaying book details to the user.
 */
public class BookDetailsController {
	/**
	 * instance variables: bookCopyController - an instance of BookCopyController to
	 * get number of available copies. All GUI elements are {@code protected}
	 * because they are used in {@link boundary.BookDetailsForUser} class.
	 * currentBook - saves the details of the book displayed. filePath - saves the
	 * download destination for when the user downloads the table of contents file.
	 */
	private BookCopyController bookCopyController;
	private BookController bookcontroller;

	protected Book currentBook;
	@FXML
	protected Label bookTitleLabel;

	@FXML
	protected Label catalogNumberLabel;

	@FXML
	protected Label authorNameLabel;

	@FXML
	protected Label publicationLabel;

	@FXML
	protected Label numberOfCopiesLabel;

	@FXML
	protected Label locationOnShelfLabel;

	@FXML
	protected Label typeLabel;

	@FXML
	private Label earliestReturnDateLabel;

	@FXML
	protected TextArea descriptionTA;

	@FXML
	protected Button closeBtn;

	@FXML
	protected TextArea categoriesTA;

	/**
	 * closes the current window.
	 * 
	 * @param event auto-generated by SceneBuilder.
	 */
	@FXML
	protected void closeHandler(ActionEvent event) {
		((Stage) closeBtn.getScene().getWindow()).close();
	}

	/**
	 * This method is called when the FXML file is loaded, it initialises the
	 * variables and some GUI elements.
	 */
	@FXML
	void initialize() {
		bookCopyController = BookCopyController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);

		bookcontroller = BookController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);

	}

	/**
	 * this method is called by the previous window, it loads the details of the
	 * book to display to the GUI elements.
	 * 
	 * @param book - the book to display
	 * @return boolean - return value is not used here, it is used in the subclass.
	 */
	public boolean loadBook(Book book) {
		currentBook = book;
		bookTitleLabel.setText(currentBook.getTitle());
		catalogNumberLabel.setText(currentBook.getCatalogNumber());
		authorNameLabel.setText(currentBook.getAuthorName());
		publicationLabel.setText(currentBook.getPublication());
		numberOfCopiesLabel.setText(
				Integer.toString(bookCopyController.getNumberOfAvailableCopies(currentBook.getCatalogNumber())));
		String earliestReturnDate = bookcontroller.getEarliestReturnDate(currentBook.getCatalogNumber());
		earliestReturnDateLabel.setText(earliestReturnDate);
		locationOnShelfLabel.setText(currentBook.getLocationOnShelf());
		typeLabel.setText(currentBook.getType().name());
		descriptionTA.setText(currentBook.getDescription());
		ArrayList<String> categoriesArrayList = this.currentBook.getCategories();
		String text = "";
		for (String string : categoriesArrayList) {
			text = text + string + ",";
		}
		categoriesTA.setText(text);
		return true;

	}

}
