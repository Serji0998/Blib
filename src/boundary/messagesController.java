package boundary;

import java.io.IOException;
import java.util.ArrayList;

import control.BorrowsController;
import control.MsgController;
import entity.ConstantsAndGlobalVars;
import entity.Message;
import entity.MessagesWithButton;
import entity.User;
import enums.MessageType;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.paint.Color;
import javafx.stage.Modality;
import javafx.stage.Stage;

/**
 * This class gets the messages for a specific user from the server and displays
 * them in a tableView.
 */
public class messagesController {
	/**
	 * instance variables: currentUser - the user currently logged in. res - an
	 * arrayList containing all the messages. msgcontroller - an instance of
	 * MsgController used to fetch the messages from the server.
	 */
	@FXML
	private Button closeButton;

	@FXML
	private Label numberOfMessages;

	@FXML
	private TableView messagesTabel;

	@FXML
	private TableColumn DateCol1;

	@FXML
	private TableColumn titleCol;

	@FXML
	private TableColumn messageInfoCol;

	@FXML
	private TableColumn deleteMessage;
	LibrarianPageController previousPageController;
	private User currentUser;
	private ArrayList<Message> res;
	private ArrayList<MessagesWithButton> resWithButton;
	private ObservableList<Message> data;
	private MsgController msgcontroller;

	/**
	 * closes the current window.
	 * 
	 * @param event - auto-generated by SceneBuilder.
	 */
	@FXML
	void onCloseHandler(ActionEvent event) {
		close();
	}

	void close() {
		Stage window = (Stage) closeButton.getScene().getWindow();
		res.clear();
		resWithButton.clear();
		previousPageController.setNumberOfMessages(currentUser);
		window.close();
	}

	/**
	 * called upon loading the FXML file, initialises some GUI elements and instance
	 * variables.
	 */
	@FXML
	void initialize() {

		msgcontroller = MsgController.getInstance(ConstantsAndGlobalVars.ipAddress,
				ConstantsAndGlobalVars.DEFAULT_PORT);

	}

	/**
	 * loads the user currently logged in into an instance variable, sends a request
	 * to the server to get all messages for that user, receives in an arrayList and
	 * displays them in a tableView.
	 * 
	 * @param u   - the user currently logged in.
	 * @param lPC - an instance of LibrarianPageController to update GUI elements in
	 *            the previous window.
	 */
	public void loadUser(User u, LibrarianPageController lPC) {
		this.currentUser = u;
		this.previousPageController = lPC;
		resWithButton = new ArrayList<>();
		res = msgcontroller.getMyMessages(u.getUserID());

		for (Message message : res) {
			MessagesWithButton m = new MessagesWithButton(message.getMessageType(), message.getTitle(),
					message.getMsg(), message.getBelong(), message.getMessageDate(), message.getUser());
			m.getView().setOnAction(e -> {
				try {
					openViewButton(message);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			});
			m.getView().setTextFill(Color.GREEN);

			m.getDelete().setOnAction(e -> {
				if (msgcontroller.deleteMessage(message)) {
					System.out.println(message);
					messagesTabel.getItems().remove(m);
				}
			});
			m.getDelete().setTextFill(Color.RED);

			resWithButton.add(m);
		}

		data = FXCollections.observableArrayList(resWithButton);
		messagesTabel.setItems(data);
		DateCol1.setCellValueFactory(new PropertyValueFactory("messageDate"));
		titleCol.setCellValueFactory(new PropertyValueFactory("title"));
		messageInfoCol.setCellValueFactory(new PropertyValueFactory("view"));
		deleteMessage.setCellValueFactory(new PropertyValueFactory("delete"));
	}

	/**
	 * each row in the tableView contains a button, this method handles the event
	 * where that button is pressed. it displays the contents of the message and
	 * some actions depending on the message type.
	 * 
	 * @param message - the row which the button belongs to.
	 * @throws IOException - thrown should loading the FXML file encounter a
	 *                     problem.
	 */
	private void openViewButton(Message message) throws IOException {
		// Check if the message type is "view"
		if (message.getMessageType().equals(MessageType.view)) {
			// Create a new modal window
			Stage primaryStage = new Stage();
			primaryStage.setAlwaysOnTop(true);
			primaryStage.initModality(Modality.APPLICATION_MODAL);

			// Load the "ViewMessage.fxml" file
			FXMLLoader loader = new FXMLLoader();
			Parent root = loader.load(getClass().getResource("/boundary/ViewMessage.fxml").openStream());

			// Set up the scene and controller
			primaryStage.setScene(new Scene(root));
			viewMessageController vMC = loader.getController();
			vMC.loadMessage(message); // Pass the message to the controller

			// Show the modal window
			primaryStage.show();
		} else {
			// Handle other message types if necessary in the future
			System.out.println("Unhandled message type: " + message.getMessageType());
		}
	}

}
